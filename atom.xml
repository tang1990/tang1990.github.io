<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>这是小黑</title>
  
  <subtitle>唐小黑的博客</subtitle>
  <link href="http://tang1990@github.io/atom.xml" rel="self"/>
  
  <link href="http://tang1990@github.io/"/>
  <updated>2022-06-12T14:29:31.911Z</updated>
  <id>http://tang1990@github.io/</id>
  
  <author>
    <name>tang1990</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>centos7离线安装postgres10</title>
    <link href="http://tang1990@github.io/2022/06/12/centos7%E7%A6%BB%E7%BA%BF%E5%AE%89%E8%A3%85postgres10/"/>
    <id>http://tang1990@github.io/2022/06/12/centos7%E7%A6%BB%E7%BA%BF%E5%AE%89%E8%A3%85postgres10/</id>
    <published>2022-06-12T14:26:44.000Z</published>
    <updated>2022-06-12T14:29:31.911Z</updated>
    
    <content type="html"><![CDATA[<h1 id="centos7离线安装postgres10"><a href="#centos7离线安装postgres10" class="headerlink" title="centos7离线安装postgres10"></a>centos7离线安装postgres10</h1><h2 id="问题背景"><a href="#问题背景" class="headerlink" title="问题背景"></a>问题背景</h2><p>在项目的部署的DS中，使用python组件连接PG数据库时，出现如下报错</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">psycopg2.OperationalError: SCRAM authentication requires libpq version 10 or above</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/tang1990/mypic@main/202206102312226.png" alt="Img"></p><h2 id="问题排查"><a href="#问题排查" class="headerlink" title="问题排查"></a>问题排查</h2><p>网上查询相关资料，是因为libpg的版本过低导致。在centos中使用yum install时，安装的版本最只能到9.2.24, 该版本不支持SCRAM，需要更新到10.0以上的版本。</p><p>可以使用以下命令查询pg的版本</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pg_config --version</span><br></pre></td></tr></table></figure><h2 id="问题解决"><a href="#问题解决" class="headerlink" title="问题解决"></a>问题解决</h2><p>因为服务器centos7,使用内网环境无法在线更新软件,在虚拟机上使用如下方法下载升级需要的rpm安装包</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># 更换rmp源</span><br><span class="line">rpm -Uvh https://download.postgresql.org/pub/repos/yum/reporpms/EL-7-x86_64/pgdg-redhat-repo-latest.noarch.rpm</span><br><span class="line"></span><br><span class="line">yum install --downloadonly --downloaddir=/gp postgresql10-devel</span><br></pre></td></tr></table></figure><p>下载后得到三个rpm包</p><ul><li>postgresql10-10.21-1PGDG.rhel7.x86_64.rpm  </li><li>postgresql10-devel-10.21-1PGDG.rhel7.x86_64.rpm  </li><li>postgresql10-libs-10.21-1PGDG.rhel7.x86_64.rpm</li></ul><p>将rpm包上传的服务器后使用如下命令安装：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum localinstall -y *.rpm</span><br></pre></td></tr></table></figure><p>或</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rpm -Uvh --force --nodeps *.rpm</span><br></pre></td></tr></table></figure><p>安装执行完成先删除系统中原有的pg_config</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">find / -type f -name &quot;pg_config&quot;</span><br><span class="line"></span><br><span class="line">rm -rf /usr/bin/pg_config</span><br></pre></td></tr></table></figure><p>然后使用如命令建立软链接：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ln -s /usr/pgsql-10/bin/pg_config pg_config</span><br></pre></td></tr></table></figure><p>再次查看pg_config版本，已升级到10.21。<br>重新运行python脚本，执行成功。</p><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><ul><li><a href="https://opensuse.pkgs.org/15.3/opensuse-oss-x86_64/postgresql10-devel-10.17-8.35.1.x86_64.rpm.html">python SCRAM authentication requires libpq version 10 or above</a></li><li><a href="https://blog.csdn.net/yinlongfei_love/article/details/80728896">Centos 7 离线安装postgresql 10</a></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;centos7离线安装postgres10&quot;&gt;&lt;a href=&quot;#centos7离线安装postgres10&quot; class=&quot;headerlink&quot; title=&quot;centos7离线安装postgres10&quot;&gt;&lt;/a&gt;centos7离线安装postgres10&lt;/</summary>
      
    
    
    
    <category term="linux" scheme="http://tang1990@github.io/categories/linux/"/>
    
    
    <category term="linux" scheme="http://tang1990@github.io/tags/linux/"/>
    
    <category term="centos" scheme="http://tang1990@github.io/tags/centos/"/>
    
    <category term="python" scheme="http://tang1990@github.io/tags/python/"/>
    
    <category term="postgres" scheme="http://tang1990@github.io/tags/postgres/"/>
    
  </entry>
  
  <entry>
    <title>关于DS调度执行hive脚本吊死问题的分析及处理</title>
    <link href="http://tang1990@github.io/2022/06/10/%E5%85%B3%E4%BA%8EDS%E8%B0%83%E5%BA%A6%E6%89%A7%E8%A1%8Chive%E8%84%9A%E6%9C%AC%E5%90%8A%E6%AD%BB%E9%97%AE%E9%A2%98%E7%9A%84%E5%88%86%E6%9E%90%E5%8F%8A%E5%A4%84%E7%90%86/"/>
    <id>http://tang1990@github.io/2022/06/10/%E5%85%B3%E4%BA%8EDS%E8%B0%83%E5%BA%A6%E6%89%A7%E8%A1%8Chive%E8%84%9A%E6%9C%AC%E5%90%8A%E6%AD%BB%E9%97%AE%E9%A2%98%E7%9A%84%E5%88%86%E6%9E%90%E5%8F%8A%E5%A4%84%E7%90%86/</id>
    <published>2022-06-10T14:05:38.000Z</published>
    <updated>2022-06-10T15:04:08.098Z</updated>
    
    <content type="html"><![CDATA[<h1 id="关于DS调度执行hive脚本吊死问题的分析及处理"><a href="#关于DS调度执行hive脚本吊死问题的分析及处理" class="headerlink" title="关于DS调度执行hive脚本吊死问题的分析及处理"></a>关于DS调度执行hive脚本吊死问题的分析及处理</h1><h2 id="问题现象"><a href="#问题现象" class="headerlink" title="问题现象"></a>问题现象</h2><p>在DS执行hive脚本时,经常会出现hive任务实际执行完成，但对应的工作任务一致处于执行中状态无法结束的问题。</p><p>在前两次运行,脚本均在三分钟内执行完毕，并正常识别到结束状态<br>第三次运行时,脚本长期不结束执行。<br><img src="https://raw.githubusercontent.com/tang1990/mypic/main/202206102212848.png?token=ADEGZTTXN5VM2NGMGSDZ7C3CUNIY2" alt="Img"><br>查看任务日志，发现实际任务早已执行完成。<br><img src="https://raw.githubusercontent.com/tang1990/mypic/main/202206102214988.png?token=ADEGZTQEZ55V7HTLHKH5VIDCUNI6W" alt="Img"></p><h2 id="问题分析"><a href="#问题分析" class="headerlink" title="问题分析"></a>问题分析</h2><h3 id="异常点分析"><a href="#异常点分析" class="headerlink" title="异常点分析"></a>异常点分析</h3><p>对比前后三次的任务日志。<br>发现前两次的任务执行时,hive自动均为任务分配了一个APPLICATION,<br>例如：下图为任务第二次执行的日志<br><img src="https://raw.githubusercontent.com/tang1990/mypic/main/202206102216001.png?token=ADEGZTT6NKVORRSQMUL5HJTCUNJGE" alt="Img"><br>程序检测到了该任务分配了一个application,其ID为<code>application_1651842678755_885090</code></p><p>程序在9:46:00时检测到该application的状态结束，与任务流的结束时间一致<br><img src="https://raw.githubusercontent.com/tang1990/mypic/main/202206102216628.png?token=ADEGZTSI5MP6MBOSVFTOZZTCUNJJC" alt="Img"></p><p>而第三次的日志中，hive分配了两个application<br>分别为</p><ul><li><code>application_1651842678755_885385</code></li><li><code>application_1651842678755_885325</code><br>怀疑其中某个application的任务状态存在问题导致任务一直无法结束</li></ul><h3 id="故障复现"><a href="#故障复现" class="headerlink" title="故障复现"></a>故障复现</h3><p>重跑任务复现现象：<br>2022/5/26 10:24:24重跑任务<br>十分钟后发现该任务仍未结束<br><img src="https://raw.githubusercontent.com/tang1990/mypic/main/202206102217178.png?token=ADEGZTV6OHWS2OHQRGUCLOTCUNJMM" alt="Img"></p><p>查看任务日志，发现hive脚本实际早已执行完成，日志中显示执行已completed且hive已经关闭了客户端链接，说明脚本实际早已执行完成：</p><p><img src="https://raw.githubusercontent.com/tang1990/mypic/main/202206102218441.png?token=ADEGZTW2GKS7KFFUADMRWZDCUNJOS" alt="Img"></p><h3 id="日志分析"><a href="#日志分析" class="headerlink" title="日志分析"></a>日志分析</h3><p>继续查看发现该任务同样生成两个application：</p><ul><li>application_1651842678755_887507</li><li>application_1651842678755_884350</li></ul><p>其中application_1651842678755_887507的状态很快进入finish状态</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yarn  application -status application_1651842678755_887507</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/tang1990/mypic/main/202206102219548.png?token=ADEGZTQ3SZYHSS26WVIYXATCUNJUO" alt="Img"></p><p>而application_1651842678755_884350的状态一直为running,且显示该任务的执行队列为default队列而非指定的user_yddsj队列</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yarn  application -status application_1651842678755_884350</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/tang1990/mypic/main/202206102222620.png?token=ADEGZTR67GA3XOC333KNMNLCUNJ6S" alt="Img"></p><p>检查脚本，脚本中已在sql运行前加入了指定队列的信息，脚本对应的任务应该都在user_yddsj队列提交：</p><p><img src="https://raw.githubusercontent.com/tang1990/mypic/main/202206102223670.png?token=ADEGZTUFJJR2QEF5C3E6Z6LCUNKDM" alt="Img"></p><p>从日志分析中可以发现两个明显的异常：<br>::: danger </p><ul><li>在指定了队列的前提下，为什么会有application被放在default队列执行</li><li>在hive客户端都已经执行完毕关闭链接的情况下，为什么会有application一直处于running的状态，而不转变为finish状态<br>:::</li></ul><h2 id="问题解决"><a href="#问题解决" class="headerlink" title="问题解决"></a>问题解决</h2><p>与HDP集群维护部门沟通，对方反馈如下：</p><blockquote><p>该现象由于集群负载过高引起，容器无法获得足够的资源导致状态一直卡在running。 而使用default队列是因为任务拆分多个application本身&gt; 就是由内部租户申请资源的，所以在default队列。</p></blockquote><p>个人对该说法存疑，但是由于我方并没有进一步排查问题的权限，只能想办法从工具层面规避该问题。<br>从现象来看，DolphinScheduler(简称DS)工具在执行shell脚本后，会搜索脚本中是否存在applicationid,如果由则会取yarn中检查所有application的状态，当所有application的状态均为finish时，DS才认为脚本全部执行成空。<br>实际上我们仅通过HIVE -E 本身反馈的状态值来判断脚本是否执行成功，而不需要检查application的状态。<br>在DS的GITHUB中查询issue，发现类似问题解决方案：</p><p><a href="https://github.com/apache/dolphinscheduler/issues/5564">[Improvement][Worker] Do not verify the status of yarn in ShellCommandExecutor #5564</a></p><p>依据issue中的描述，修改<code>dolphinscheduler/server/worker/task/AbstractCommandExecutor.java</code>组件代码<br>去除以下内容:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (status) &#123; </span><br><span class="line">    <span class="comment">// set appIds </span></span><br><span class="line">    List&lt;String&gt; appIds = getAppIds(taskExecutionContext.getLogPath()); </span><br><span class="line">    result.setAppIds(String.join(Constants.COMMA, appIds)); </span><br><span class="line"> </span><br><span class="line">    <span class="comment">// SHELL task state </span></span><br><span class="line">    result.setExitStatusCode(process.exitValue()); </span><br><span class="line"> </span><br><span class="line">    <span class="comment">// if yarn task , yarn state is final state </span></span><br><span class="line">    <span class="comment">// 删除下面的内容</span></span><br><span class="line">    <span class="keyword">if</span> (process.exitValue() == <span class="number">0</span>) &#123; </span><br><span class="line">        result.setExitStatusCode(isSuccessOfYarnState(appIds) ? EXIT_CODE_SUCCESS : EXIT_CODE_FAILURE); </span><br></pre></td></tr></table></figure><p>同时修改以下内容避免空指针问题:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"> <span class="keyword">if</span> (applicationStatus.equals(ExecutionStatus.FAILURE) </span><br><span class="line">     || applicationStatus.equals(ExecutionStatus.KILL)) &#123; </span><br><span class="line">     <span class="keyword">return</span> <span class="literal">false</span>; </span><br><span class="line"> &#125; </span><br><span class="line">  </span><br><span class="line"> <span class="keyword">if</span> (applicationStatus.equals(ExecutionStatus.SUCCESS)) &#123; </span><br><span class="line">     <span class="keyword">break</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>修改为：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"> <span class="keyword">if</span> (ExecutionStatus.SUCCESS.equals(applicationStatus) &#123; </span><br><span class="line">     pass; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>将程序重新打包后替换原来的<code>dolphinscheduler-server-1.3.8.jar</code></p><p>重启DS后重跑任务，两次均正常结束，</p><p><img src="https://raw.githubusercontent.com/tang1990/mypic/main/202206102224280.png?token=ADEGZTW4Q2RSRQSPBEDP3L3CUNKGK" alt="Img"></p><p>调整sql引出语法错误，检测出错时任务状态是否正常<br>测试通过<br><img src="https://raw.githubusercontent.com/tang1990/mypic/main/202206102225527.png?token=ADEGZTWIQBWIVUFFBPRQLB3CUNKII" alt="Img"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;关于DS调度执行hive脚本吊死问题的分析及处理&quot;&gt;&lt;a href=&quot;#关于DS调度执行hive脚本吊死问题的分析及处理&quot; class=&quot;headerlink&quot; title=&quot;关于DS调度执行hive脚本吊死问题的分析及处理&quot;&gt;&lt;/a&gt;关于DS调度执行hive脚本</summary>
      
    
    
    
    <category term="大数据" scheme="http://tang1990@github.io/categories/%E5%A4%A7%E6%95%B0%E6%8D%AE/"/>
    
    
    <category term="ds" scheme="http://tang1990@github.io/tags/ds/"/>
    
  </entry>
  
</feed>
